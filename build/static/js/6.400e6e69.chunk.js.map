{"version":3,"sources":["helper/blogHelper.js"],"names":["getBlog","id","blogpost","filter","blog","parseInt","getRecentPost","post","timestamp","Date","postdate","getDateInitials","string","names","split","initials","substring","length","toUpperCase","getPostNavigation","items","index","output","undefined","push","className","to","getFilteredPosts","posts","cat","tag","author","searchQuery","catgoryFilter","tagFilter","authorFilter","searchFilter","category","includes","tags","title","toLowerCase","i","count","blogcategory","setCategoriesCount","today","slice","map","month","getTime","getDate","getMonth","getFullYear","setDemoDate"],"mappings":"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","file":"static/js/6.400e6e69.chunk.js","sourcesContent":["import React from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport blogpost from \"../data/blog/blog.json\";\r\nimport blogcategory from '../data/category.json';\r\n\r\nfunction setCategoriesCount() {\r\n    for (let i = 0; i < blogcategory.length; i++) {\r\n        var count = blogpost.filter(post => { return post.category.includes(parseInt(blogcategory[i].id)) });\r\n        count = count.length;\r\n        blogcategory[i].count = count;\r\n    }\r\n}\r\nsetCategoriesCount();\r\n// Post details\r\nfunction getBlog(id) {\r\n    return blogpost.filter(blog => { return blog.id === parseInt(id) })[0];\r\n}\r\n// Related post\r\nfunction getPostByCategory(items, pageRoute) {\r\n    var elems = blogpost.filter((post) => { return parseInt(post.id) !== parseInt(pageRoute) && post.category.some(r => items.includes(r)) });\r\n    return elems;\r\n}\r\n\r\n// Recent post\r\nfunction changeToMonth(month) {\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    return months[month];\r\n}\r\n\r\nfunction setDemoDate() {\r\n    var today = new Date();\r\n    blogpost.slice(0, 4).map((post) => {\r\n         post.timestamp = today.getTime() - (3 * 24 * 60 * 60 * 1000);\r\n        // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\r\n        // in the blog.json object\r\n        post.postdate = `${today.getDate()} ${changeToMonth(today.getMonth())}, ${today.getFullYear()}`;\r\n        return post;\r\n    });\r\n}\r\n\r\nfunction getRecentPost() {\r\n    var elems = blogpost.filter(post => {\r\n        return post.timestamp < new Date(post.postdate);\r\n    });\r\n    return elems;\r\n}\r\n\r\nsetDemoDate();\r\n// Get Date\r\nfunction getDateInitials(string) {\r\n    var names = string.split(' '),\r\n        initials = '<div class=\"text-custom-white fw-600 date bg-custom-blue\">' + names[0].substring(0, 2) + '</div>';\r\n\r\n    if (names.length > 2) {\r\n        initials += '<div class=\"text-custom-white year\">' +names[names.length - 2].substring(0, 3).toUpperCase() + \" 2022\";\r\n    }\r\n    return initials;\r\n}\r\n// Pagination\r\nfunction getPostNavigation(items, index) {\r\n    var output = [],\r\n        id, item;\r\n    if (items[index - 1] !== undefined && index - 1 !== -1) {\r\n        item = items[index - 1];\r\n        id = item.id;\r\n        // Show the previous button \r\n        output.push(<li className=\"page-item\" key={id}><Link className=\"page-link\" to={\"/blog-details/\" + parseInt(id)}>Previous</Link></li>);\r\n    }\r\n    if (items[index + 1] !== undefined && index <= items.length - 1) {\r\n        // Show next button \r\n        item = items[index + 1];\r\n        id = item.id;\r\n        output.push(<li className=\"page-item\" key={id}><Link className=\"page-link\" to={\"/blog-details/\" + parseInt(id)}>Next</Link></li>);\r\n    }\r\n\r\n    return output;\r\n}\r\n// Filter \r\nfunction getFilteredPosts(posts, filter = { cat: '', tag: '', author: '', searchQuery: '' }) {\r\n    var catgoryFilter = filter.cat !== undefined && filter.cat !== null && filter.cat !== '';\r\n    var tagFilter = filter.tag !== undefined && filter.tag !== null && filter.tag !== '';\r\n    var authorFilter = filter.author !== undefined && filter.author !== null && filter.author !== '';\r\n    var searchFilter = filter.searchQuery !== undefined && filter.searchQuery !== null && filter.searchQuery !== '';\r\n    // Category filter\r\n    if (catgoryFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.category !== undefined && post.category !== null) && post.category.includes(parseInt(filter.cat))\r\n        })\r\n    } \r\n    // Tag filter\r\n    if (tagFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.tags !== undefined && post.tags !== null) && post.tags.includes(parseInt(filter.tag))\r\n        })\r\n    }\r\n    // Author filter\r\n    if (authorFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.author !== undefined && post.author !== null) && post.author.includes(parseInt(filter.author))\r\n        })\r\n    }\r\n    if (searchFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.title !== undefined && post.title !== null) && post.title.toLowerCase().includes(filter.searchQuery.toLowerCase())\r\n        })\r\n    }\r\n    return posts;\r\n}\r\nexport { getBlog, getFilteredPosts, getRecentPost, getPostByCategory, getDateInitials, getPostNavigation };"],"sourceRoot":""}